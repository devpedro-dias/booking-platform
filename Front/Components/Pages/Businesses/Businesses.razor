@page "/businesses"
@attribute [Authorize]
<RadzenRow JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center" Class="rz-mb-4">
    <RadzenText TextStyle="TextStyle.H6">
        Businesses
    </RadzenText>
    <RadzenButton Icon="add_circle_outline" Text="Add Business" Click="AddBusiness" />
</RadzenRow>

<RadzenDataGrid @ref="businessesGrid" AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand" AllowPaging="true" PageSize="5" AllowSorting="true"
                Data="@businesses" TItem="BusinessResponseDTO">
    <Columns>
        <RadzenDataGridColumn Width="50px" Title="#" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
            <Template Context="data">
                @((businessesGrid.CurrentPage * businessesGrid.PageSize) + businesses.ToList().IndexOf(data) + 1)
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn Property="@nameof(BusinessResponseDTO.Id)" Title="Business ID" Width="100px" />
        <RadzenDataGridColumn Property="@nameof(BusinessResponseDTO.Name)" Title="Name" />
        <RadzenDataGridColumn Property="@nameof(BusinessResponseDTO.Address)" Title="Address" />
        <RadzenDataGridColumn Property="@nameof(BusinessResponseDTO.PhoneNumber)" Title="Phone Number" />
        <RadzenDataGridColumn Property="@nameof(BusinessResponseDTO.OwnerUserId)" Title="Owner User ID" />

        <RadzenDataGridColumn Width="120px" TextAlign="TextAlign.Center" Filterable="false" Sortable="false" Title="Actions">
            <Template Context="business">
                <RadzenButton ButtonStyle="ButtonStyle.Info" Variant="Variant.Flat" Shade="Shade.Lighter" Icon="edit" Size="ButtonSize.Small" Click="@(() => EditBusiness(business.Id))" />
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Shade="Shade.Lighter" Icon="delete" Size="ButtonSize.Small" Class="rz-ml-1" Click="@(() => DeleteBusiness(business.Id))" />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    RadzenDataGrid<BusinessResponseDTO> businessesGrid;
    List<BusinessResponseDTO> businesses;

    protected override async Task OnInitializedAsync()
    {
        businesses = new List<BusinessResponseDTO>
        {
            new BusinessResponseDTO
            {
                Id = Guid.NewGuid().ToString(),
                Name = "Local Coffee Shop",
                Address = "123 Main St, Anytown",
                PhoneNumber = "555-1234",
                OwnerUserId = "owner_coffee_1",
                Services = new List<ServiceResponseDTO>(), // Placeholder
                ServiceProviders = new List<ServiceProviderResponseDTO>() // Placeholder
            },
            new BusinessResponseDTO
            {
                Id = Guid.NewGuid().ToString(),
                Name = "Quick Haircuts",
                Address = "456 Oak Ave, Smallville",
                PhoneNumber = "555-5678",
                OwnerUserId = "owner_hair_2",
                Services = new List<ServiceResponseDTO>(),
                ServiceProviders = new List<ServiceProviderResponseDTO>()
            },
            new BusinessResponseDTO
            {
                Id = Guid.NewGuid().ToString(),
                Name = "Tech Repair Hub",
                Address = "789 Pine Rd, Metro City",
                PhoneNumber = "555-9012",
                OwnerUserId = "owner_tech_3",
                Services = new List<ServiceResponseDTO>(),
                ServiceProviders = new List<ServiceProviderResponseDTO>()
            }
        };
    }

    async Task AddBusiness()
    {
        Console.WriteLine("Add Business clicked!");
        // await DialogService.OpenAsync<AddBusinessPage>("Add New Business", new DialogOptions() { Width = "600px" });
    }

    async Task EditBusiness(string businessId)
    {
        Console.WriteLine($"Edit Business with ID: {businessId}");
        // await DialogService.OpenAsync<EditBusinessPage>($"Edit Business {businessId}",
        //     new Dictionary<string, object>() { { "BusinessId", businessId } },
        //     new DialogOptions() { Width = "600px" });
    }

    async Task DeleteBusiness(string businessId)
    {
        Console.WriteLine($"Delete Business with ID: {businessId}");
        // var result = await DialogService.Confirm("Are you sure you want to delete this business?", "Confirm Deletion");
        // if (result.HasValue && result.Value)
        // {
        //     await BusinessService.DeleteBusinessAsync(businessId);
        //     businesses = (await BusinessService.GetBusinessesAsync()).ToList();
        //     await businessesGrid.Reload();
        // }
    }
}