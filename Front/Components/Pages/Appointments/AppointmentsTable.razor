@using Radzen;
@using Radzen.Blazor;
@using System.Linq;
@using System.Collections.Generic;

@if (Appointments != null)
{
    <RadzenDataGrid @ref="appointmentsGrid" AllowFiltering="@AllowFiltering" FilterPopupRenderMode="PopupRenderMode.OnDemand" AllowPaging="@AllowPaging" PageSize="@PageSize" AllowSorting="@AllowSorting"
                    Data="@Appointments" TItem="AppointmentResponseDTO" class="mb-3">
        <Columns>
            @if (ShowRowNumber)
            {
                <RadzenDataGridColumn Width="50px" Title="#" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
                    <Template Context="data">
                        @((appointmentsGrid.CurrentPage * appointmentsGrid.PageSize) + Appointments.ToList().IndexOf(data) + 1)
                    </Template>
                </RadzenDataGridColumn>
            }
            <RadzenDataGridColumn Property="@nameof(AppointmentResponseDTO.BusinessId)" Title="Business ID" />
            <RadzenDataGridColumn Property="@nameof(AppointmentResponseDTO.CustomerId)" Title="Customer ID" />
            <RadzenDataGridColumn Property="@nameof(AppointmentResponseDTO.ServiceProviderId)" Title="Service Provider ID" />
            <RadzenDataGridColumn Property="@nameof(AppointmentResponseDTO.ServiceId)" Title="Service ID" />
            <RadzenDataGridColumn Property="@nameof(AppointmentResponseDTO.TotalPriceInCents)" Title="Total Price">
                <Template Context="appointment">
                    @((appointment.TotalPriceInCents / 100.0).ToString("C", new System.Globalization.CultureInfo("pt-BR")))
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="@nameof(AppointmentResponseDTO.Status)" Title="Status" />
            <RadzenDataGridColumn Property="@nameof(AppointmentResponseDTO.StartDateTime)" Title="Start Time" FormatString="{0:HH:mm}" />
            <RadzenDataGridColumn Property="@nameof(AppointmentResponseDTO.EndDateTime)" Title="End Time" FormatString="{0:HH:mm}" />

            @if (ShowActions)
            {
                <RadzenDataGridColumn Width="120px" TextAlign="TextAlign.Center" Filterable="false" Sortable="false" Title="Actions">
                    <Template Context="appointment">
                        <RadzenButton ButtonStyle="ButtonStyle.Info" Variant="Variant.Flat" Shade="Shade.Lighter" Icon="edit" Size="ButtonSize.Small" Click="@(() => OnEditAppointment.InvokeAsync(appointment.Id))" />
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Shade="Shade.Lighter" Icon="delete" Size="ButtonSize.Small" Class="rz-ml-1" Click="@(() => OnDeleteAppointment.InvokeAsync(appointment.Id))" />
                    </Template>
                </RadzenDataGridColumn>
            }
        </Columns>
    </RadzenDataGrid>
}
else
{
    <p>Loading appointments...</p>
}

@code {
    [Parameter]
    public List<AppointmentResponseDTO> Appointments { get; set; }

    [Parameter]
    public bool AllowFiltering { get; set; } = true;

    [Parameter]
    public bool AllowPaging { get; set; } = true;

    [Parameter]
    public int PageSize { get; set; } = 5;

    [Parameter]
    public bool AllowSorting { get; set; } = true;

    [Parameter]
    public bool ShowActions { get; set; } = true;

    [Parameter]
    public bool ShowRowNumber { get; set; } = true;


    [Parameter]
    public EventCallback<string> OnEditAppointment { get; set; }

    [Parameter]
    public EventCallback<string> OnDeleteAppointment { get; set; }

    RadzenDataGrid<AppointmentResponseDTO> appointmentsGrid;
}