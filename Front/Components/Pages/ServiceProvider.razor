@page "/service-provider"

@using booking_platform.DTO;
@using Radzen;
@using Radzen.Blazor;
@using System.Linq;
@using System.Collections.Generic;

<RadzenRow JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center" Class="rz-mb-4">
    <RadzenText TextStyle="TextStyle.H6">
        Service Providers
    </RadzenText>
    <RadzenButton Icon="add_circle_outline" Text="Add Service Provider" Click="AddServiceProvider" />
</RadzenRow>

<RadzenDataGrid @ref="serviceProvidersGrid" AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand" AllowPaging="true" PageSize="5" AllowSorting="true"
                Data="@serviceProviders" TItem="ServiceProviderResponseDTO">
    <Columns>
        <RadzenDataGridColumn Width="50px" Title="#" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
            <Template Context="data">
                @((serviceProvidersGrid.CurrentPage * serviceProvidersGrid.PageSize) + serviceProviders.ToList().IndexOf(data) + 1)
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn Property="@nameof(ServiceProviderResponseDTO.Id)" Title="SP ID" Width="100px" />
        <RadzenDataGridColumn Property="@nameof(ServiceProviderResponseDTO.Name)" Title="Name" />
        <RadzenDataGridColumn Property="@nameof(ServiceProviderResponseDTO.BusinessId)" Title="Business ID" />
        <RadzenDataGridColumn Property="@nameof(ServiceProviderResponseDTO.UserId)" Title="User ID" />

        <RadzenDataGridColumn Property="@nameof(ServiceProviderResponseDTO.AvailableFromWeekday)" Title="Available From">
            <Template Context="sp">
                @((DayOfWeek)sp.AvailableFromWeekday)
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(ServiceProviderResponseDTO.AvailableToWeekday)" Title="Available To">
            <Template Context="sp">
                @((DayOfWeek)sp.AvailableToWeekday)
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn Property="@nameof(ServiceProviderResponseDTO.AvailableFromTime)" Title="From Time" FormatString="{0:c}" />
        <RadzenDataGridColumn Property="@nameof(ServiceProviderResponseDTO.AvailableToTime)" Title="To Time" FormatString="{0:c}" />

        <RadzenDataGridColumn Width="120px" TextAlign="TextAlign.Center" Filterable="false" Sortable="false" Title="Actions">
            <Template Context="serviceProvider">
                <RadzenButton ButtonStyle="ButtonStyle.Info" Variant="Variant.Flat" Shade="Shade.Lighter" Icon="edit" Size="ButtonSize.Small" Click="@(() => EditServiceProvider(serviceProvider.Id))" />
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Shade="Shade.Lighter" Icon="delete" Size="ButtonSize.Small" Class="rz-ml-1" Click="@(() => DeleteServiceProvider(serviceProvider.Id))" />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    RadzenDataGrid<ServiceProviderResponseDTO> serviceProvidersGrid;
    List<ServiceProviderResponseDTO> serviceProviders; // Changed from IEnumerable to List

    protected override async Task OnInitializedAsync()
    {
        // Simulate some data for demonstration
        serviceProviders = new List<ServiceProviderResponseDTO>
        {
            new ServiceProviderResponseDTO
            {
                Id = Guid.NewGuid().ToString(),
                BusinessId = Guid.NewGuid().ToString(),
                UserId = "user_sp_1",
                Name = "Alice Barber",
                AvatarImageUrl = null, // Or a placeholder URL
                AvailableFromWeekday = (int)DayOfWeek.Monday,
                AvailableToWeekday = (int)DayOfWeek.Friday,
                AvailableFromTime = new TimeSpan(9, 0, 0), // 09:00
                AvailableToTime = new TimeSpan(17, 0, 0)    // 17:00
            },
            new ServiceProviderResponseDTO
            {
                Id = Guid.NewGuid().ToString(),
                BusinessId = Guid.NewGuid().ToString(),
                UserId = "user_sp_2",
                Name = "Bob Stylist",
                AvatarImageUrl = null,
                AvailableFromWeekday = (int)DayOfWeek.Tuesday,
                AvailableToWeekday = (int)DayOfWeek.Saturday,
                AvailableFromTime = new TimeSpan(10, 0, 0),
                AvailableToTime = new TimeSpan(18, 0, 0)
            },
            new ServiceProviderResponseDTO
            {
                Id = Guid.NewGuid().ToString(),
                BusinessId = Guid.NewGuid().ToString(),
                UserId = "Test Guy", // Some might not have a linked user
                Name = "Charlie Tech",
                AvatarImageUrl = null,
                AvailableFromWeekday = (int)DayOfWeek.Monday,
                AvailableToWeekday = (int)DayOfWeek.Wednesday,
                AvailableFromTime = new TimeSpan(8, 30, 0),
                AvailableToTime = new TimeSpan(16, 30, 0)
            }
        };

        // In a real application, you would fetch this from an API:
        // @inject IServiceProviderService ServiceProviderService
        // serviceProviders = (await ServiceProviderService.GetServiceProvidersAsync()).ToList();
    }

    async Task AddServiceProvider()
    {
        Console.WriteLine("Add Service Provider clicked!");
        // await DialogService.OpenAsync<AddServiceProviderPage>("Add New Service Provider", new DialogOptions() { Width = "600px" });
    }

    async Task EditServiceProvider(string serviceProviderId)
    {
        Console.WriteLine($"Edit Service Provider with ID: {serviceProviderId}");
        // await DialogService.OpenAsync<EditServiceProviderPage>($"Edit Service Provider {serviceProviderId}",
        //     new Dictionary<string, object>() { { "ServiceProviderId", serviceProviderId } },
        //     new DialogOptions() { Width = "600px" });
    }

    async Task DeleteServiceProvider(string serviceProviderId)
    {
        Console.WriteLine($"Delete Service Provider with ID: {serviceProviderId}");
        // var result = await DialogService.Confirm("Are you sure you want to delete this service provider?", "Confirm Deletion");
        // if (result.HasValue && result.Value)
        // {
        //     await ServiceProviderService.DeleteServiceProviderAsync(serviceProviderId);
        //     serviceProviders = (await ServiceProviderService.GetServiceProvidersAsync()).ToList();
        //     await serviceProvidersGrid.Reload();
        // }
    }
}